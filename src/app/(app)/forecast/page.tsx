"use client";

import { useEffect, useState } from "react";
import { fetchForecast } from "@/lib/api";
import { ForecastDay } from "@/lib/types";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Smile, Meh, Frown } from "lucide-react"; // Import icons
import React from "react";

// Helper to get all visual info based on AQI
const getAqiInfo = (aqi: number): {
  level: string;
  color: string;
  Icon: React.ElementType;
} => {
  if (aqi <= 50) return { level: "Good", color: "text-green-600", Icon: Smile };
  if (aqi <= 100) return { level: "Moderate", color: "text-yellow-600", Icon: Meh };
  return { level: "Unhealthy", color: "text-red-600", Icon: Frown };
};

const formatDay = (dateString: string): string => {
  const date = new Date(dateString);
  const today = new Date();
  // Reset time part to compare dates only
  today.setHours(0, 0, 0, 0);
  date.setHours(0, 0, 0, 0);

  if (date.getTime() === today.getTime()) {
    return "Today";
  }
  return date.toLocaleDateString("en-US", { weekday: 'long', timeZone: 'Asia/Jakarta' });
};

export default function ForecastPage() {
  const [forecastData, setForecastData] = useState<ForecastDay[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadForecast = async () => {
      try {
        const data = await fetchForecast();
        // Filter out any days that might have invalid data
        setForecastData(data.forecast.filter(day => typeof day.avg === 'number'));
      } catch (err) {
        setError("Could not load forecast data. Please try again later.");
        console.error(err);
      } finally {
        setIsLoading(false);
      }
    };
    loadForecast();
  }, []);

  return (
    <div className="p-4 md:p-6 space-y-4">
      <header className="text-center">
        <h1 className="text-3xl font-bold">7-Day Air Quality Forecast</h1>
        <p className="text-muted-foreground">Plan your week ahead in Malang.</p>
      </header>
      <Card>
        <CardHeader>
          <CardTitle>Average PM2.5 Forecast</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {isLoading ? (
              [...Array(7)].map((_, i) => (
                <div key={i} className="flex items-center space-x-4 p-2">
                  <Skeleton className="h-6 w-24" />
                  <Skeleton className="h-6 flex-grow" />
                  <Skeleton className="h-6 w-12" />
                </div>
              ))
            ) : error ? (
              <Alert variant="destructive">
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            ) : (
              forecastData.map((day) => {
                const aqiValue = Math.round(day.avg); // Use the avg value directly
                const { color, Icon } = getAqiInfo(aqiValue);
                const barWidth = `${Math.min(100, (aqiValue / 150) * 100)}%`;

                return (
                  <div key={day.day} className="grid grid-cols-[30px_100px_1fr_50px] items-center gap-4 text-sm p-2 rounded-md hover:bg-gray-50/80">
                    <Icon className={`h-5 w-5 ${color}`} />
                    <span className="font-medium text-muted-foreground">{formatDay(day.day)}</span>
                    <div className="w-full bg-gray-200 rounded-full h-4 overflow-hidden">
                      <div
                        className="h-full rounded-full transition-all duration-500"
                        style={{ width: barWidth, backgroundColor: '#87939cff' }}
                      />
                    </div>
                    <span className={`font-bold text-right ${color}`}>
                      {aqiValue}
                    </span>
                  </div>
                );
              })
            )}
          </div>
          <div className="text-xs text-muted-foreground mt-4 text-center">
            Forecast generated by AirKid&apos;s predictive LSTM model.
          </div>
        </CardContent>
      </Card>
    </div>
  );
}